datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  username           String              @unique
  password           String
  roles              Json
  id                 String              @id @default(cuid())
  name               String
  bio                String
  email              String
  age                Int
  birthDate          DateTime
  score              Float
  manager            User?               @relation(name: "employees", fields: [managerId], references: [id])
  managerId          String?
  employees          User[]              @relation(name: "employees")
  organizations      Organization[]
  interests          EnumUserInterests[]
  priority           EnumUserPriority
  isCurious          Boolean
  location           String
  extendedProperties Json
  profile            Profile?            @relation(fields: [profileId], references: [id])
  profileId          String?             @unique
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  user      User?
}

model Order {
  id         String          @id @default(cuid())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  customer   Customer        @relation(fields: [customerId], references: [id])
  customerId String
  status     EnumOrderStatus
  label      EnumOrderLabel?
}

model Organization {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String
  users        User[]
  customers    Customer[] @relation(name: "CustomersOnOrganization")
  vipCustomers Customer[] @relation(name: "vipCustomers")
}

model Customer {
  id                String                       @id @default(cuid())
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt
  email             String
  firstName         String?
  lastName          String?
  isVip             Boolean?
  birthData         DateTime?
  averageSale       Float?
  favoriteNumber    Int?
  geoLocation       String?
  comments          String?
  favoriteColors    EnumCustomerFavoriteColors[]
  customerType      EnumCustomerCustomerType?
  organization      Organization?                @relation(name: "CustomersOnOrganization", fields: [organizationId], references: [id])
  organizationId    String?
  vipOrganization   Organization?                @relation(name: "vipCustomers", fields: [vipOrganizationId], references: [id])
  vipOrganizationId String?
  orders            Order[]
}

model Empty {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EnumUserInterests {
  programming
  design
}

enum EnumUserPriority {
  high
  medium
  low
}

enum EnumOrderStatus {
  pending
  inProgress
  done
}

enum EnumOrderLabel {
  fragile
}

enum EnumCustomerFavoriteColors {
  red
  green
  purple
  yellow
}

enum EnumCustomerCustomerType {
  platinum
  gold
  bronze
  regular
}