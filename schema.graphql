# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

type Customer {
  averageSale: Float
  birthData: DateTime
  comments: String
  createdAt: DateTime!
  customerType: EnumCustomerCustomerType
  email: String!
  favoriteColors: [EnumCustomerFavoriteColors!]
  favoriteNumber: Float
  firstName: String
  geoLocation: String
  id: String!
  isVip: Boolean
  lastName: String
  orders(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): [Order!]!
  organization: Organization
  updatedAt: DateTime!
  vipOrganization: Organization
}

input CustomerCreateInput {
  averageSale: Float
  birthData: DateTime
  comments: String
  customerType: EnumCustomerCustomerType
  email: String!
  favoriteColors: [EnumCustomerFavoriteColors!]
  favoriteNumber: Float
  firstName: String
  geoLocation: String
  isVip: Boolean
  lastName: String
  orders: OrderCreateNestedManyWithoutCustomersInput
  organization: OrganizationWhereUniqueInput
  vipOrganization: OrganizationWhereUniqueInput
}

input CustomerCreateNestedManyWithoutOrganizationsInput {
  connect: [CustomerWhereUniqueInput!]
}

input CustomerListRelationFilter {
  every: CustomerWhereInput
  none: CustomerWhereInput
  some: CustomerWhereInput
}

input CustomerOrderByInput {
  averageSale: SortOrder
  birthData: SortOrder
  comments: SortOrder
  createdAt: SortOrder
  customerType: SortOrder
  email: SortOrder
  favoriteColors: SortOrder
  favoriteNumber: SortOrder
  firstName: SortOrder
  geoLocation: SortOrder
  id: SortOrder
  isVip: SortOrder
  lastName: SortOrder
  organizationId: SortOrder
  updatedAt: SortOrder
  vipOrganizationId: SortOrder
}

input CustomerUpdateInput {
  averageSale: Float
  birthData: DateTime
  comments: String
  customerType: EnumCustomerCustomerType
  email: String
  favoriteColors: [EnumCustomerFavoriteColors!]
  favoriteNumber: Float
  firstName: String
  geoLocation: String
  isVip: Boolean
  lastName: String
  orders: OrderUpdateManyWithoutCustomersInput
  organization: OrganizationWhereUniqueInput
  vipOrganization: OrganizationWhereUniqueInput
}

input CustomerUpdateManyWithoutOrganizationsInput {
  connect: [CustomerWhereUniqueInput!]
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
}

input CustomerWhereInput {
  averageSale: FloatNullableFilter
  birthData: DateTimeNullableFilter
  comments: StringNullableFilter
  createdAt: DateTimeFilter
  customerType: EnumCustomerCustomerType
  email: StringFilter
  favoriteNumber: IntNullableFilter
  firstName: StringNullableFilter
  geoLocation: StringNullableFilter
  id: StringFilter
  isVip: BooleanNullableFilter
  lastName: StringNullableFilter
  orders: OrderListRelationFilter
  organization: OrganizationWhereUniqueInput
  updatedAt: DateTimeFilter
  vipOrganization: OrganizationWhereUniqueInput
}

input CustomerWhereUniqueInput {
  id: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Empty {
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input EmptyOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input EmptyWhereInput {
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input EmptyWhereUniqueInput {
  id: String!
}

enum EnumCustomerCustomerType {
  Bronze
  Gold
  Platinum
  Regular
}

enum EnumCustomerFavoriteColors {
  Green
  Purple
  Red
  Yellow
}

enum EnumOrderLabel {
  Fragile
}

enum EnumOrderStatus {
  Done
  InProgress
  Pending
}

enum EnumUserInterests {
  Design
  Programming
}

enum EnumUserPriority {
  High
  Low
  Medium
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createCustomer(data: CustomerCreateInput!): Customer!
  createOrder(data: OrderCreateInput!): Order!
  createOrganization(data: OrganizationCreateInput!): Organization!
  createProfile(data: ProfileCreateInput!): Profile!
  createUser(data: UserCreateInput!): User!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer!
  deleteEmpty(where: EmptyWhereUniqueInput!): Empty!
  deleteOrder(where: OrderWhereUniqueInput!): Order!
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization!
  deleteProfile(where: ProfileWhereUniqueInput!): Profile!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization!
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Order {
  createdAt: DateTime!
  customer: Customer
  id: String!
  label: EnumOrderLabel
  status: EnumOrderStatus
  updatedAt: DateTime!
}

input OrderCreateInput {
  customer: CustomerWhereUniqueInput!
  label: EnumOrderLabel
  status: EnumOrderStatus!
}

input OrderCreateNestedManyWithoutCustomersInput {
  connect: [OrderWhereUniqueInput!]
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderOrderByInput {
  createdAt: SortOrder
  customerId: SortOrder
  id: SortOrder
  label: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input OrderUpdateInput {
  customer: CustomerWhereUniqueInput
  label: EnumOrderLabel
  status: EnumOrderStatus
}

input OrderUpdateManyWithoutCustomersInput {
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
}

input OrderWhereInput {
  createdAt: DateTimeFilter
  customer: CustomerWhereUniqueInput
  id: StringFilter
  label: EnumOrderLabel
  status: EnumOrderStatus
  updatedAt: DateTimeFilter
}

input OrderWhereUniqueInput {
  id: String!
}

type Organization {
  createdAt: DateTime!
  customers(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): [Customer!]!
  id: String!
  name: String!
  updatedAt: DateTime!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
  vipCustomers(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): [Customer!]!
}

input OrganizationCreateInput {
  customers: CustomerCreateNestedManyWithoutOrganizationsInput
  name: String!
  users: UserCreateNestedManyWithoutOrganizationsInput
  vipCustomers: CustomerCreateNestedManyWithoutOrganizationsInput
}

input OrganizationCreateNestedManyWithoutUsersInput {
  connect: [OrganizationWhereUniqueInput!]
}

input OrganizationListRelationFilter {
  every: OrganizationWhereInput
  none: OrganizationWhereInput
  some: OrganizationWhereInput
}

input OrganizationOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input OrganizationUpdateInput {
  customers: CustomerUpdateManyWithoutOrganizationsInput
  name: String
  users: UserUpdateManyWithoutOrganizationsInput
  vipCustomers: CustomerUpdateManyWithoutOrganizationsInput
}

input OrganizationUpdateManyWithoutUsersInput {
  connect: [OrganizationWhereUniqueInput!]
  disconnect: [OrganizationWhereUniqueInput!]
  set: [OrganizationWhereUniqueInput!]
}

input OrganizationWhereInput {
  createdAt: DateTimeFilter
  customers: CustomerListRelationFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
  vipCustomers: CustomerListRelationFilter
}

input OrganizationWhereUniqueInput {
  id: String!
}

type Profile {
  createdAt: DateTime!
  email: String!
  id: String!
  updatedAt: DateTime!
  user: User
}

input ProfileCreateInput {
  email: String!
  user: UserWhereUniqueInput
}

input ProfileOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input ProfileUpdateInput {
  email: String
  user: UserWhereUniqueInput
}

input ProfileWhereInput {
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereUniqueInput
}

input ProfileWhereUniqueInput {
  id: String!
}

type Query {
  _customersMeta(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): MetaQueryPayload!
  _emptiesMeta(orderBy: [EmptyOrderByInput!], skip: Float, take: Float, where: EmptyWhereInput): MetaQueryPayload!
  _ordersMeta(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): MetaQueryPayload!
  _organizationsMeta(orderBy: [OrganizationOrderByInput!], skip: Float, take: Float, where: OrganizationWhereInput): MetaQueryPayload!
  _profilesMeta(orderBy: [ProfileOrderByInput!], skip: Float, take: Float, where: ProfileWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): [Customer!]!
  empties(orderBy: [EmptyOrderByInput!], skip: Float, take: Float, where: EmptyWhereInput): [Empty!]!
  empty(where: EmptyWhereUniqueInput!): Empty
  order(where: OrderWhereUniqueInput!): Order
  orders(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): [Order!]!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(orderBy: [OrganizationOrderByInput!], skip: Float, take: Float, where: OrganizationWhereInput): [Organization!]!
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(orderBy: [ProfileOrderByInput!], skip: Float, take: Float, where: ProfileWhereInput): [Profile!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  age: Float!
  bio: String!
  birthDate: DateTime!
  email: String!
  employees(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
  extendedProperties: JSONObject!
  id: String!
  interests: [EnumUserInterests!]
  isCurious: Boolean!
  location: String!
  manager: User
  name: String!
  organizations(orderBy: [OrganizationOrderByInput!], skip: Float, take: Float, where: OrganizationWhereInput): [Organization!]!
  priority: EnumUserPriority
  profile: Profile
  roles: JSONObject!
  score: Float!
  username: String!
}

input UserCreateInput {
  age: Float!
  bio: String!
  birthDate: DateTime!
  email: String!
  employees: UserCreateNestedManyWithoutUsersInput
  extendedProperties: JSONObject!
  interests: [EnumUserInterests!]
  isCurious: Boolean!
  location: String!
  manager: UserWhereUniqueInput
  name: String!
  organizations: OrganizationCreateNestedManyWithoutUsersInput
  password: String!
  priority: EnumUserPriority!
  profile: ProfileWhereUniqueInput
  roles: JSONObject!
  score: Float!
  username: String!
}

input UserCreateNestedManyWithoutOrganizationsInput {
  connect: [UserWhereUniqueInput!]
}

input UserCreateNestedManyWithoutUsersInput {
  connect: [UserWhereUniqueInput!]
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  age: SortOrder
  bio: SortOrder
  birthDate: SortOrder
  email: SortOrder
  extendedProperties: SortOrder
  id: SortOrder
  interests: SortOrder
  isCurious: SortOrder
  location: SortOrder
  managerId: SortOrder
  name: SortOrder
  password: SortOrder
  priority: SortOrder
  profileId: SortOrder
  roles: SortOrder
  score: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  age: Float
  bio: String
  birthDate: DateTime
  email: String
  employees: UserUpdateManyWithoutUsersInput
  extendedProperties: JSONObject
  interests: [EnumUserInterests!]
  isCurious: Boolean
  location: String
  manager: UserWhereUniqueInput
  name: String
  organizations: OrganizationUpdateManyWithoutUsersInput
  password: String
  priority: EnumUserPriority
  profile: ProfileWhereUniqueInput
  roles: JSONObject
  score: Float
  username: String
}

input UserUpdateManyWithoutOrganizationsInput {
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
}

input UserUpdateManyWithoutUsersInput {
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
}

input UserWhereInput {
  age: IntFilter
  bio: StringFilter
  birthDate: DateTimeFilter
  extendedProperties: JsonFilter
  id: StringFilter
  isCurious: BooleanFilter
  location: StringFilter
  manager: UserWhereUniqueInput
  name: StringFilter
  organizations: OrganizationListRelationFilter
  priority: EnumUserPriority
  profile: ProfileWhereUniqueInput
}

input UserWhereUniqueInput {
  id: String!
}
